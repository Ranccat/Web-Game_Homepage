@page "/login"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Server.Circuits

@inject UserService userService
@inject ILogger<Login> logger
@inject UserSessionService sessionService
@inject NavigationManager navigation

<PageTitle>Login</PageTitle>

<div class="login-container">
    
    <EditForm Model="loginUser" OnValidSubmit="HandleSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (string.IsNullOrEmpty(errorMessage) == false)
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <div class="mb-3"> <!-- UserID -->
            <label for="inputUserId" class="form-label">User ID</label>
            <InputText class="form-control" id="inputUserId" @bind-Value="loginUser.UserId" placeholder="Enter your user ID" />
            <ValidationMessage For="@(() => loginUser.UserId)" class="validation-message" />
        </div>

        <div class="mb-3"> <!-- Password -->
            <label for="inputPassword" class="form-label">Password</label>
            <InputText type="password" class="form-control" id="inputPassword" @bind-Value="loginUser.Password" placeholder="Enter your password" />
            <ValidationMessage For="@(() => loginUser.Password)" class="validation-message" />
        </div>
    
        <button class="btn btn-primary" type="submit">Login</button>

    </EditForm>
</div>


@code {
    private LoginDto loginUser = new LoginDto();
    private string? errorMessage = null;

    private async Task HandleSubmit()
    {
        var result = await userService.LoginAsync(loginUser);
        if (result.IsSuccess)
        {
            sessionService.Login(loginUser.UserId, DateTime.UtcNow);
            navigation.NavigateTo("/");
        }
        else
        {
    
            logger.LogInformation(result.ErrorMessage);
            errorMessage = result.ErrorMessage;
        }
    }
}
